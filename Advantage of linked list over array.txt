Arrays are sequential while Linked Lists are not, apart from this major advantage is linked list are dynamic, so if you want to add new elements more than 10 (declared in array), then Linked List could do the thing for you. Also due to this property, internally in databases, tuples are stored in the form of a linked list (nodes in the B-Tree/B+Tree) in the RAM, and in the file it has to be stored sequentially to retrieve data in the tree - in the file it is stored sequentially because now you know the fixed size of the data. So this is a good example of how data structures which seem to be contradictory could complement each other so nicely!

Time: Arrays are faster than linked list in retrieving elements, arrays just need indirection, while linked list needs pointer to find the element by scanning it.
Dynamic Memory Allocation happens using dynamic stack, and linked list, you see how the property of dynamic additions and deletions of linked list helps to create better memory managers, this if lets say implemented through arrays may be heuristics could have being performed to measure the size of the memory chunk, and this would essentially go into the fixed memory allocation technique.

While Arrays on the other hand, are used when you know that throughout the life cycle of your code/program the size of the array wonâ€™t expand or shrink: a specific set of keywords in the closed domain text search may be would contain a high probable keywords in an array of lets say 10 elements, this is to say that you rank the 10 most used words to search the document and then analyze it accordingly, while on the other hand, think about your cart in Amazon, or any E-Commerce website, it is a linked list that you expand or shrink based on your needs and those memory are garbage collected as and when needed.